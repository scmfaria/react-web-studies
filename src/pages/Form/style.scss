// Variables
$primaryColor: #2196F3;
$selectionRadio: #63b9fd;

.input-content {
	display: flex;
	justify-content: center;
	align-items: center;
	flex-wrap: wrap;
	.input-wrap {
		flex: 1;
		input, select {
			width: 100%;
			min-width: 400px;
		}
	}
}

// Inputs 
.input-wrap {
	padding: 16px;
	position: relative;
	display: flex;
    align-items: center;

    &.has-icon {
        .icon {
            color: #e91e63;
            position: absolute;
            left: 24px;
            top: 31px;
        }
        input, select {
            padding-left: 30px;
        }
        select + label, 
        input[type="text"] + label {
            left: 50px;
        }
    }
    
    &.active input[type="text"] + label, input[type="text"]:focus + label,
	&.active select + label, select:focus + label {
        top: 8px;
        left: 24px;
        padding: 2px 4px;
        background-color: #fff;
        font-size: 12px;
        font-weight: 500;
    }
    select, input {
		border: 2px solid $primaryColor;
        padding: 16px;
		border-radius: 7px;
		outline: none;
		&:focus {
			box-shadow: 1px 1px 4px rgba(33, 150, 243, 0.4);
        }
    }
    
    select + label,
    input[type="text"] + label {
        transition: 150ms ease;
        position: absolute;
        top: 32px;
        left: 36px;
        color: $primaryColor;
    }
}

// radio - checkbox
input[type="checkbox"], label,
input[type="radio"], label {
    cursor: pointer;
}
.input-wrap {
    .radio-item, .check-item {
        margin: 16px;
        display: flex;
        align-items: center;
        position: relative;
        input[type="radio"],
        input[type="checkbox"] {
            width: 18px;
            height: 18px;
            position: absolute;
            z-index: 1;
            opacity: 0;
            &:checked ~ .ghost-radio,
            &:checked ~ .ghost-check {
                border: 2px solid $primaryColor;
            }
            &:checked ~ label {
                font-weight: 500;
            }
        }
    }
}

.ghost-radio, .ghost-check {
    position: relative;
    width: 16px;
    height: 16px;
    min-width: 16px;
    min-height: 16px;
    background: #f5f5f5;
    margin-right: 8px;
    transition: 300ms cubic-bezier(0.88, 0.01, 0.05, 1.01);
    &::after {
        content: '';
        position: absolute;
        background-color: $selectionRadio;
    }
}

// Radio
.input-wrap {
    .radio-item {
        input[type="radio"] {
            &:checked ~ .ghost-radio {
                &::after {
                    width: 10px;
                    height: 10px;
                }
            }
        }
    }

    .ghost-radio {
        border-radius: 100px;
        border: 2px solid $primaryColor; // solid Ã© a forma como a borda vai ser desenhada
        &::after {
            width: 0;
            height: 0;
            transition: 300ms cubic-bezier(0.88, 0.01, 0.05, 1.01);
            border-radius: 100px;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }
    }
}

// Checkbox
.input-wrap {
    .check-item {
      input[type="checkbox"] {
        &:checked ~ .ghost-check {
          &::after, &::before {
            transition:  150ms cubic-bezier(0.6, -0.12, 0.35, 1.22);
          }
          &::after {
            height: 10px;
            transition-delay: 150ms;
            visibility: visible;
            bottom: 1px;
            right: 3px;
          }
          &::before {
            width: 6px; 
          }
        }
      }
    }
    .ghost-check {
      border: 2px solid #cacaca;
      border-radius: 4px;
      &::after, &::before {
        border-radius: 2px;
      }
      &::after {
        width: 2px;
        height: 2px;
        transform: rotate(38deg); 
        visibility: hidden;
        bottom: 1.5px;
        right: 6px;
      }
      &::before {
        content: '';
        position: absolute;
        background-color: $selectionRadio;
        width: 0;
        height: 2px;
        transform: rotate(37deg);
        top: 7.3px;
        left: 0.5px;
      }
    }
}


//pseudo-classes: usadas para estilizar um elemento com base em seu estado
//ex: &:checked 

// pseudo-elemento: palavra-chave adicionada a um seletor que permite definir o estilo de uma parte especifica
// do elemento selecionado, por exemplo: &::after (tudo que vem depois)